#!/usr/bin/env python3

import subprocess
import sys
import time

def run_haskell_realtime(haskell_file_path, *args):
    """
    Runs a Haskell program and displays its output in real-time.
    """

    try:
        # Command to run Haskell program with unbuffered output
        command = f"source common.sh && ghc-run {haskell_file_path} {' '.join(args)}"

        # Use Popen to launch the process, with line-buffered output
        process = subprocess.Popen(
            ['bash', '-c', command],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            bufsize=1,  # Line-buffered output
            universal_newlines=True
        )

        print(f"Running Haskell program: {haskell_file_path} {' '.join(args)}", flush=True)

        # Continuously read output in real-time
        while True:
            # Read line-by-line from stdout
            line = process.stdout.readline()

            if not line:
                # If no more output and the process has finished, break the loop
                if process.poll() is not None:
                    break
                # Sleep for a very short time to avoid CPU hogging
                time.sleep(0.01)
            
            # Print the line immediately with flush
            print(line, end='', flush=True)

        # Check and display any error output
        stderr_output = process.stderr.read()
        if stderr_output:
            print(stderr_output, file=sys.stderr, flush=True)

        # Wait for the process to finish and check if it completed successfully
        process.wait()
        if process.returncode != 0:
            print(f"Haskell program exited with code: {process.returncode}", file=sys.stderr)
            sys.exit(process.returncode)

    except FileNotFoundError:
        print(f"Error: Haskell file not found at {haskell_file_path}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"An error occurred: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: ./run_haskell.py <haskell_file_path> [arguments]", file=sys.stderr)
        sys.exit(1)

    haskell_file_path = sys.argv[1]
    haskell_args = sys.argv[2:]
    run_haskell_realtime(haskell_file_path, *haskell_args)
